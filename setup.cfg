# This file is used to configure your project.
# Read more about the various options under:
# http://setuptools.readthedocs.io/en/latest/setuptools.html#configuring-setup-using-setup-cfg-files

[metadata]
name = probnum
version = 0.1.0
description = Probabilistic Numerics in Python.
url = https://github.com/probabilistic-numerics/probnum
author = ProbNum Authors
author-email =
license = MIT
long-description = file: README.md
long-description-content-type = text/markdown
keywords = probabilistic-numerics
# Change if running only on Windows, Mac or Linux (comma-separated)
platforms = any
# Add here all kinds of additional classifiers as defined under
# https://pypi.python.org/pypi?%3Aaction=list_classifiers
classifiers =
    Development Status :: 3 - Alpha
    License :: OSI Approved :: MIT License
    Operating System :: OS Independent
    Programming Language :: Python :: 3.6

[options]
zip_safe = False
packages = find:
include_package_data = True
package_dir =
    =src
# Dependencies of the project (semicolon/line-separated):
install_requires =
    numpy
    scipy>=1.4
    GPy
    matplotlib
    cached_property; python_version<"3.8"
# The usage of test_requires is discouraged, see `Dependency Management` docs
# tests_require = pytest; pytest-cov
# Require a specific Python version, e.g. Python 2.7 or >= 3.4
python_requires = >=3.6

[options.packages.find]
where = src
exclude =
    tests

[options.extras_require]
# Add here additional requirements for extra features, to install with:
# `pip install probnum[PDF]` like:
# PDF = ReportLab; RXP
# Add here test requirements (semicolon/line-separated)
testing =
    pytest
    pytest-cov

[options.entry_points]
# Add here console scripts like:
# console_scripts =
#     script_name = probnum.module:function
# For example:
# console_scripts =
#     fibonacci = probnum.skeleton:run

[test]
# py.test options when running `python setup.py test`
# addopts = --verbose
extras = True

[tool:pytest]
# Options for py.test:
# Specify command line options as you would do when invoking py.test directly.
# e.g. --cov-report html (or xml) for html/xml output or --junitxml junit.xml
# in order to write a coverage file that can be read by Jenkins.
addopts =
    --verbose
    --doctest-modules
norecursedirs =
    dist
    build
    .tox
testpaths =
    src
    tests

[aliases]
dists = bdist_wheel

[bdist_wheel]
# Use this option if your package is pure-python
universal = 1

[build_sphinx]
source_dir = docs
build_dir = build/sphinx

